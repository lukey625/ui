#!/usr/bin/env python3
"""
Phoenix Pro Elite - Phase 2B: API Integrations & Encryption
Adds Telegram, OpenAI, Claude integrations + encrypted API key storage
Run this AFTER Phase 2A is working
"""

import os
import sys
import json
import base64
import hashlib
import hmac
import secrets
from datetime import datetime
from pathlib import Path

# Configuration
PHOENIX_DIR = Path("/root/phoenix-pro-elite")
UI_FILE = PHOENIX_DIR / "ui" / "app.py"
API_KEYS_FILE = PHOENIX_DIR / "data" / "api_keys.json"

def install_additional_dependencies():
    """Install additional packages for API integrations"""
    import subprocess
    
    packages = [
        "cryptography==41.0.7",
        "pycryptodome==3.19.0",
        "bcrypt==4.1.2"
    ]
    
    print("📦 Installing API integration dependencies...")
    for package in packages:
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", package])
            print(f"✅ Installed {package}")
        except Exception as e:
            print(f"⚠️ Warning: Could not install {package}: {e}")
    print("✅ API integration dependencies ready!")

def backup_ui_file():
    """Backup the current UI file"""
    if UI_FILE.exists():
        backup_file = UI_FILE.parent / f"app_backup_phase2a_{datetime.now().strftime('%Y%m%d_%H%M%S')}.py"
        import shutil
        shutil.copy2(UI_FILE, backup_file)
        print(f"✅ Backed up Phase 2A UI to: {backup_file}")
        return True
    else:
        print("❌ UI file not found. Please run previous phases first.")
        return False

def create_api_integration_code():
    """Create the API integration code to add"""
    return '''
# ============================================================================
# PHASE 2B ADDITIONS: API INTEGRATIONS & ENCRYPTION
# ============================================================================

import secrets
import base64
import hashlib
import hmac
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

# Enhanced Encryption System
class SecureStorage:
    def __init__(self):
        self.key_file = PHOENIX_DIR / "data" / ".encryption_key"
        self.salt_file = PHOENIX_DIR / "data" / ".salt"
        self.master_key_file = PHOENIX_DIR / "data" / ".master_key"
        self.key = self._get_or_create_key()
        self.cipher = Fernet(self.key)
    
    def _get_or_create_key(self):
        """Get or create encryption key with PBKDF2"""
        # Ensure data directory exists
        (PHOENIX_DIR / "data").mkdir(exist_ok=True)
        
        # Generate master key if not exists
        if not self.master_key_file.exists():
            master_key = secrets.token_bytes(32)
            with open(self.master_key_file, 'wb') as f:
                f.write(master_key)
            os.chmod(self.master_key_file, 0o600)
        
        # Generate salt if not exists
        if not self.salt_file.exists():
            salt = secrets.token_bytes(16)
            with open(self.salt_file, 'wb') as f:
                f.write(salt)
            os.chmod(self.salt_file, 0o600)
        
        # Generate encryption key if not exists
        if not self.key_file.exists():
            # Use PBKDF2 with master key and salt
            with open(self.master_key_file, 'rb') as f:
                master_key = f.read()
            with open(self.salt_file, 'rb') as f:
                salt = f.read()
            
            kdf = PBKDF2HMAC(
                algorithm=hashes.SHA256(),
                length=32,
                salt=salt,
                iterations=100000,
            )
            key = base64.urlsafe_b64encode(kdf.derive(master_key))
            
            with open(self.key_file, 'wb') as f:
                f.write(key)
            os.chmod(self.key_file, 0o600)
        
        # Load the key
        with open(self.key_file, 'rb') as f:
            return f.read()
    
    def encrypt_data(self, data: dict) -> str:
        """Encrypt dictionary data"""
        json_data = json.dumps(data).encode()
        encrypted_data = self.cipher.encrypt(json_data)
        return base64.b64encode(encrypted_data).decode()
    
    def decrypt_data(self, encrypted_data: str) -> dict:
        """Decrypt data back to dictionary"""
        try:
            encrypted_bytes = base64.b64decode(encrypted_data.encode())
            decrypted_bytes = self.cipher.decrypt(encrypted_bytes)
            return json.loads(decrypted_bytes.decode())
        except Exception as e:
            logger.error(f"Decryption error: {e}")
            return {}

# Initialize secure storage
secure_storage = SecureStorage()

# Enhanced API Keys Manager
class APIKeysManager:
    def __init__(self):
        self.api_keys_file = API_KEYS_FILE
        self.secure_storage = secure_storage
        self.api_keys = self.load_api_keys()
    
    def load_api_keys(self):
        """Load encrypted API keys"""
        if not self.api_keys_file.exists():
            return {}
        
        try:
            with open(self.api_keys_file, 'r') as f:
                encrypted_data = f.read()
            
            if encrypted_data.strip():
                return self.secure_storage.decrypt_data(encrypted_data)
            return {}
        except Exception as e:
            logger.error(f"Error loading API keys: {e}")
            return {}
    
    def save_api_keys(self, keys_data=None):
        """Save encrypted API keys"""
        if keys_data:
            self.api_keys.update(keys_data)
        
        try:
            encrypted_data = self.secure_storage.encrypt_data(self.api_keys)
            
            with open(self.api_keys_file, 'w') as f:
                f.write(encrypted_data)
            
            # Secure file permissions
            os.chmod(self.api_keys_file, 0o600)
            logger.info("API keys saved successfully")
            return True
        except Exception as e:
            logger.error(f"Error saving API keys: {e}")
            return False
    
    def get_keys(self, service):
        """Get API keys for specific service"""
        return self.api_keys.get(service, {})
    
    def set_keys(self, service, keys):
        """Set API keys for specific service"""
        self.api_keys[service] = keys
        return self.save_api_keys()
    
    def test_connection(self, service):
        """Test API connection for service"""
        keys = self.get_keys(service)
        if not keys:
            return {"error": "No API keys configured"}
        
        try:
            if service == "telegram":
                return self._test_telegram(keys)
            elif service == "openai":
                return self._test_openai(keys)
            elif service == "anthropic":
                return self._test_anthropic(keys)
            elif service in ["binance", "coinbase", "bybit", "okx", "bitget", "kraken"]:
                return self._test_exchange(service, keys)
            else:
                return {"error": f"Unknown service: {service}"}
        except Exception as e:
            return {"error": str(e)}
    
    def _test_telegram(self, keys):
        """Test Telegram bot connection"""
        bot_token = keys.get('bot_token') or keys.get('key')
        if not bot_token:
            return {"error": "Missing bot token"}
        
        try:
            response = requests.get(f"https://api.telegram.org/bot{bot_token}/getMe", timeout=10)
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    return {"success": True, "bot_info": data.get('result', {})}
            return {"error": "Invalid bot token"}
        except Exception as e:
            return {"error": str(e)}
    
    def _test_openai(self, keys):
        """Test OpenAI API connection"""
        api_key = keys.get('api_key') or keys.get('key')
        if not api_key:
            return {"error": "Missing API key"}
        
        try:
            headers = {"Authorization": f"Bearer {api_key}"}
            response = requests.get("https://api.openai.com/v1/models", headers=headers, timeout=10)
            if response.status_code == 200:
                return {"success": True}
            return {"error": "Invalid API key"}
        except Exception as e:
            return {"error": str(e)}
    
    def _test_anthropic(self, keys):
        """Test Anthropic/Claude API connection"""
        api_key = keys.get('api_key') or keys.get('key')
        if not api_key:
            return {"error": "Missing API key"}
        
        try:
            headers = {
                "x-api-key": api_key,
                "content-type": "application/json"
            }
            # Test with a simple request
            data = {
                "model": "claude-3-sonnet-20240229",
                "max_tokens": 1,
                "messages": [{"role": "user", "content": "Hi"}]
            }
            response = requests.post("https://api.anthropic.com/v1/messages", 
                                   headers=headers, json=data, timeout=10)
            if response.status_code in [200, 400]:  # 400 is also valid (means API key works)
                return {"success": True}
            return {"error": "Invalid API key"}
        except Exception as e:
            return {"error": str(e)}
    
    def _test_exchange(self, service, keys):
        """Test exchange API connection"""
        api_key = keys.get('api_key') or keys.get('key')
        secret = keys.get('secret') or keys.get('api_secret')
        
        if not api_key or not secret:
            return {"error": "Missing API key or secret"}
        
        # For Phase 2B, just validate they exist
        # Full exchange integration will be in later phases
        return {"success": True, "message": f"{service.title()} keys configured"}
    
    def send_telegram_alert(self, alert):
        """Send alert to Telegram if configured"""
        try:
            telegram_keys = self.get_keys('telegram')
            if not telegram_keys:
                return
            
            bot_token = telegram_keys.get('bot_token') or telegram_keys.get('key')
            chat_id = telegram_keys.get('chat_id')
            
            if not bot_token or not chat_id:
                return
            
            # Format message
            icon_map = {
                'critical': '🚨',
                'error': '❌',
                'warning': '⚠️',
                'info': 'ℹ️',
                'success': '✅'
            }
            
            icon = icon_map.get(alert['level'], '📢')
            message = f"{icon} Phoenix Alert\\n\\n"
            message += f"Level: {alert['level'].upper()}\\n"
            message += f"Message: {alert['message']}\\n"
            message += f"Time: {alert['timestamp']}\\n"
            
            if alert['bot_id']:
                message += f"Bot: {alert['bot_id']}\\n"
            
            # Send to Telegram
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            data = {
                'chat_id': chat_id,
                'text': message,
                'parse_mode': 'HTML'
            }
            
            response = requests.post(url, json=data, timeout=10)
            if response.status_code == 200:
                logger.info("Alert sent to Telegram successfully")
            else:
                logger.warning(f"Failed to send Telegram alert: {response.status_code}")
                
        except Exception as e:
            logger.error(f"Error sending Telegram alert: {e}")

# Initialize API keys manager
api_keys_manager = APIKeysManager()

# Enhanced UI State with API Integration
class APIIntegratedUIState(EnhancedUIState):
    def __init__(self):
        super().__init__()
        self.api_keys_manager = api_keys_manager
    
    def add_alert(self, level: str, message: str, bot_id: str = None, category: str = 'general'):
        """Add alert to database and UI with Telegram integration"""
        try:
            cursor = self.db_connection.cursor()
            cursor.execute("""
                INSERT INTO alerts (level, message, bot_id, category)
                VALUES (?, ?, ?, ?)
            """, (level, message, bot_id, category))
            self.db_connection.commit()
            
            # Add to UI alerts list
            alert = {
                'id': cursor.lastrowid,
                'timestamp': datetime.now().isoformat(),
                'level': level,
                'message': message,
                'bot_id': bot_id,
                'acknowledged': False,
                'category': category
            }
            self.alerts.insert(0, alert)
            
            # Keep only last 100 alerts in memory
            self.alerts = self.alerts[:100]
            
            logger.info(f"Alert added: {level} - {message}")
            
            # Send to Telegram if configured
            self.api_keys_manager.send_telegram_alert(alert)
            
        except Exception as e:
            logger.error(f"Error adding alert: {e}")

# API Routes
@app.route('/api/ui/api_keys', methods=['GET', 'POST'])
def handle_api_keys():
    """Get or save API keys"""
    if request.method == 'GET':
        # Return masked keys for display
        keys = {}
        for service, service_keys in api_keys_manager.api_keys.items():
            keys[service] = {}
            for key, value in service_keys.items():
                if len(value) > 8:
                    keys[service][key] = value[:4] + "*" * (len(value) - 8) + value[-4:]
                else:
                    keys[service][key] = "*" * len(value)
        return jsonify(keys)
    else:
        try:
            data = request.json
            success = api_keys_manager.save_api_keys(data)
            
            if success:
                ui_state.add_alert('success', 'API keys saved successfully', category='security')
                return jsonify({'status': 'success'})
            else:
                return jsonify({'error': 'Failed to save API keys'})
        except Exception as e:
            return jsonify({'error': str(e)})

@app.route('/api/ui/api_keys/test/<service>', methods=['POST'])
def test_api_connection(service):
    """Test API connection for specific service"""
    try:
        result = api_keys_manager.test_connection(service)
        
        # Log API usage
        cursor = ui_state.db_connection.cursor()
        cursor.execute("""
            INSERT INTO api_usage (service, endpoint, status_code, error_message)
            VALUES (?, ?, ?, ?)
        """, (service, 'test_connection', 200 if 'success' in result else 400, 
              result.get('error', '')))
        ui_state.db_connection.commit()
        
        return jsonify(result)
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/api/ui/telegram/send_test', methods=['POST'])
def send_test_telegram():
    """Send test message to Telegram"""
    try:
        telegram_keys = api_keys_manager.get_keys('telegram')
        if not telegram_keys:
            return jsonify({'error': 'Telegram not configured'})
        
        bot_token = telegram_keys.get('bot_token') or telegram_keys.get('key')
        chat_id = telegram_keys.get('chat_id')
        
        if not bot_token or not chat_id:
            return jsonify({'error': 'Missing bot token or chat ID'})
        
        # Send test message
        message = "🧪 Phoenix Pro Elite Test Message\\n\\nIf you receive this, Telegram integration is working correctly!"
        
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': message
        }
        
        response = requests.post(url, json=data, timeout=10)
        
        if response.status_code == 200:
            ui_state.add_alert('success', 'Test message sent to Telegram', category='telegram')
            return jsonify({'status': 'success', 'message': 'Test message sent successfully'})
        else:
            error_msg = f"Failed to send message: {response.status_code}"
            return jsonify({'error': error_msg})
            
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/api/ui/ai/analyze', methods=['POST'])
def ai_analysis():
    """AI analysis endpoint"""
    try:
        data = request.json
        analysis_type = data.get('type', 'general')
        prompt = data.get('prompt', '')
        
        if not prompt:
            return jsonify({'error': 'No prompt provided'})
        
        # Check which AI service to use
        openai_keys = api_keys_manager.get_keys('openai')
        anthropic_keys = api_keys_manager.get_keys('anthropic')
        
        result = None
        
        if openai_keys and openai_keys.get('api_key'):
            result = _call_openai_api(prompt, openai_keys['api_key'])
        elif anthropic_keys and anthropic_keys.get('api_key'):
            result = _call_anthropic_api(prompt, anthropic_keys['api_key'])
        else:
            return jsonify({'error': 'No AI service configured'})
        
        return jsonify(result)
        
    except Exception as e:
        return jsonify({'error': str(e)})

def _call_openai_api(prompt, api_key):
    """Call OpenAI API"""
    try:
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        
        data = {
            "model": "gpt-4",
            "messages": [
                {"role": "system", "content": "You are a trading analysis assistant for Phoenix Pro Elite."},
                {"role": "user", "content": prompt}
            ],
            "max_tokens": 500,
            "temperature": 0.7
        }
        
        response = requests.post("https://api.openai.com/v1/chat/completions", 
                               headers=headers, json=data, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            return {
                "success": True,
                "response": result['choices'][0]['message']['content'],
                "service": "openai"
            }
        else:
            return {"error": f"OpenAI API error: {response.status_code}"}
            
    except Exception as e:
        return {"error": str(e)}

def _call_anthropic_api(prompt, api_key):
    """Call Anthropic/Claude API"""
    try:
        headers = {
            "x-api-key": api_key,
            "content-type": "application/json"
        }
        
        data = {
            "model": "claude-3-sonnet-20240229",
            "max_tokens": 500,
            "messages": [
                {"role": "user", "content": f"As a trading analysis assistant for Phoenix Pro Elite: {prompt}"}
            ]
        }
        
        response = requests.post("https://api.anthropic.com/v1/messages", 
                               headers=headers, json=data, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            return {
                "success": True,
                "response": result['content'][0]['text'],
                "service": "anthropic"
            }
        else:
            return {"error": f"Anthropic API error: {response.status_code}"}
            
    except Exception as e:
        return {"error": str(e)}

'''

def create_enhanced_html_additions():
    """Create enhanced HTML/JavaScript additions for API integration"""
    return '''

        <!-- Enhanced API Management Section -->
        <div id="apis" class="tab-content">
            <div class="api-section">
                <h2 class="panel-title">Exchange APIs</h2>
                
                <div class="api-service">
                    <div class="service-icon">📈 Binance</div>
                    <input type="password" class="api-input" id="binance-api_key" placeholder="API Key">
                    <input type="password" class="api-input" id="binance-secret" placeholder="Secret">
                    <button class="btn btn-blue" onclick="testConnection('binance')">Test</button>
                    <div class="connection-status status-disconnected-api" id="binance-status">Not Connected</div>
                </div>
                
                <div class="api-service">
                    <div class="service-icon">💰 Coinbase</div>
                    <input type="password" class="api-input" id="coinbase-api_key" placeholder="API Key">
                    <input type="password" class="api-input" id="coinbase-secret" placeholder="Secret">
                    <button class="btn btn-blue" onclick="testConnection('coinbase')">Test</button>
                    <div class="connection-status status-disconnected-api" id="coinbase-status">Not Connected</div>
                </div>
                
                <div class="api-service">
                    <div class="service-icon">🚀 Bybit</div>
                    <input type="password" class="api-input" id="bybit-api_key" placeholder="API Key">
                    <input type="password" class="api-input" id="bybit-secret" placeholder="Secret">
                    <button class="btn btn-blue" onclick="testConnection('bybit')">Test</button>
                    <div class="connection-status status-disconnected-api" id="bybit-status">Not Connected</div>
                </div>
                
                <div class="api-service">
                    <div class="service-icon">⚡ OKX</div>
                    <input type="password" class="api-input" id="okx-api_key" placeholder="API Key">
                    <input type="password" class="api-input" id="okx-secret" placeholder="Secret">
                    <button class="btn btn-blue" onclick="testConnection('okx')">Test</button>
                    <div class="connection-status status-disconnected-api" id="okx-status">Not Connected</div>
                </div>
                
                <div class="api-service">
                    <div class="service-icon">🔥 Bitget</div>
                    <input type="password" class="api-input" id="bitget-api_key" placeholder="API Key">
                    <input type="password" class="api-input" id="bitget-secret" placeholder="Secret">
                    <button class="btn btn-blue" onclick="testConnection('bitget')">Test</button>
                    <div class="connection-status status-disconnected-api" id="bitget-status">Not Connected</div>
                </div>
                
                <div class="api-service">
                    <div class="service-icon">🌊 Kraken</div>
                    <input type="password" class="api-input" id="kraken-api_key" placeholder="API Key">
                    <input type="password" class="api-input" id="kraken-secret" placeholder="Secret">
                    <button class="btn btn-blue" onclick="testConnection('kraken')">Test</button>
                    <div class="connection-status status-disconnected-api" id="kraken-status">Not Connected</div>
                </div>
            </div>
            
            <!-- Telegram Integration Section -->
            <div class="api-section" style="background: linear-gradient(135deg, #0088cc, #0066aa); margin: 20px 0;">
                <h2 class="panel-title" style="color: white;">📱 Telegram Integration</h2>
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px; margin-bottom: 16px;">
                    <input type="password" class="api-input" id="telegram-bot_token" placeholder="Bot Token" style="background: rgba(255,255,255,0.1);">
                    <input type="text" class="api-input" id="telegram-chat_id" placeholder="Chat ID" style="background: rgba(255,255,255,0.1);">
                </div>
                <div style="display: flex; gap: 12px;">
                    <button class="btn btn-blue" onclick="testConnection('telegram')">Test Connection</button>
                    <button class="btn btn-green" onclick="sendTestTelegram()">Send Test Message</button>
                    <div class="connection-status status-disconnected-api" id="telegram-status">Not Connected</div>
                </div>
            </div>
            
            <!-- AI Services Section -->
            <div class="api-section">
                <h2 class="panel-title">🧠 AI Services</h2>
                
                <div class="api-service">
                    <div class="service-icon">🤖 OpenAI</div>
                    <input type="password" class="api-input" id="openai-api_key" placeholder="API Key" style="grid-column: span 2;">
                    <button class="btn btn-blue" onclick="testConnection('openai')">Test</button>
                    <div class="connection-status status-disconnected-api" id="openai-status">Not Connected</div>
                </div>
                
                <div class="api-service">
                    <div class="service-icon">🧠 Claude</div>
                    <input type="password" class="api-input" id="anthropic-api_key" placeholder="API Key" style="grid-column: span 2;">
                    <button class="btn btn-blue" onclick="testConnection('anthropic')">Test</button>
                    <div class="connection-status status-disconnected-api" id="anthropic-status">Not Connected</div>
                </div>
            </div>
            
            <div style="margin-top: 24px; text-align: center;">
                <button class="btn btn-green" onclick="saveAllAPIKeys()">💾 Save All API Keys</button>
                <span id="apiSaveStatus" style="margin-left: 16px; font-weight: 500;"></span>
            </div>
        </div>

        <!-- Enhanced JavaScript Functions -->
        <script>
        // Enhanced API Management Functions
        async function saveAllAPIKeys() {
            const apiData = {};
            
            // Exchanges
            const exchanges = ['binance', 'coinbase', 'bybit', 'okx', 'bitget', 'kraken'];
            exchanges.forEach(exchange => {
                const key = document.getElementById(`${exchange}-api_key`)?.value;
                const secret = document.getElementById(`${exchange}-secret`)?.value;
                if (key && secret) {
                    apiData[exchange] = { api_key: key, secret: secret };
                }
            });
            
            // AI Services
            const aiServices = ['openai', 'anthropic'];
            aiServices.forEach(service => {
                const key = document.getElementById(`${service}-api_key`)?.value;
                if (key) {
                    apiData[service] = { api_key: key };
                }
            });
            
            // Telegram
            const telegramToken = document.getElementById('telegram-bot_token')?.value;
            const telegramChat = document.getElementById('telegram-chat_id')?.value;
            if (telegramToken && telegramChat) {
                apiData.telegram = { bot_token: telegramToken, chat_id: telegramChat };
            }
            
            try {
                const response = await fetch('/api/ui/api_keys', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(apiData)
                });
                
                const result = await response.json();
                
                if (result.error) {
                    showNotification('Failed to save API keys: ' + result.error, 'error');
                } else {
                    showNotification('All API keys saved successfully! 🔒', 'success');
                    document.getElementById('apiSaveStatus').innerHTML = '<span style="color: var(--accent-green);">✅ Saved & Encrypted</span>';
                    setTimeout(() => document.getElementById('apiSaveStatus').innerHTML = '', 3000);
                }
            } catch (err) {
                showNotification('Error saving API keys', 'error');
            }
        }
        
        async function testConnection(service) {
            const statusEl = document.getElementById(`${service}-status`);
            statusEl.textContent = 'Testing...';
            statusEl.className = 'connection-status status-testing';
            
            try {
                const response = await fetch(`/api/ui/api_keys/test/${service}`, {
                    method: 'POST'
                });
                
                const result = await response.json();
                
                if (result.error) {
                    statusEl.textContent = 'Failed';
                    statusEl.className = 'connection-status status-disconnected-api';
                    showNotification(`${service} connection failed: ${result.error}`, 'error');
                } else {
                    statusEl.textContent = 'Connected';
                    statusEl.className = 'connection-status status-connected-api';
                    showNotification(`${service} connected successfully! ✅`, 'success');
                }
            } catch (err) {
                statusEl.textContent = 'Error';
                statusEl.className = 'connection-status status-disconnected-api';
                showNotification(`${service} test failed`, 'error');
            }
        }
        
        async function sendTestTelegram() {
            try {
                const response = await fetch('/api/ui/telegram/send_test', {
                    method: 'POST'
                });
                
                const result = await response.json();
                
                if (result.error) {
                    showNotification('Telegram test failed: ' + result.error, 'error');
                } else {
                    showNotification('Test message sent to Telegram! 📱', 'success');
                }
            } catch (err) {
                showNotification('Telegram test failed', 'error');
            }
        }
        
        async function loadAPIKeys() {
            try {
                const response = await fetch('/api/ui/api_keys');
                const keys = await response.json();
                
                // Populate form fields with masked values
                Object.entries(keys).forEach(([service, serviceKeys]) => {
                    Object.entries(serviceKeys).forEach(([keyType, keyValue]) => {
                        const inputId = `${service}-${keyType}`;
                        const input = document.getElementById(inputId);
                        if (input && keyValue && !keyValue.includes('*')) {
                            input.placeholder = `${keyType} configured`;
                        }
                    });
                });
            } catch (err) {
                console.error('Error loading API keys:', err);
            }
        }
        
        // AI Analysis Function
        async function analyzeWithAI(prompt, type = 'general') {
            try {
                const response = await fetch('/api/ui/ai/analyze', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ prompt, type })
                });
                
                const result = await response.json();
                
                if (result.error) {
                    showNotification('AI analysis failed: ' + result.error, 'error');
                    return null;
                } else {
                    showNotification(`AI analysis completed via ${result.service}`, 'success');
                    return result.response;
                }
            } catch (err) {
                showNotification('AI analysis error', 'error');
                return null;
            }
        }
        
        // Load API keys on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadAPIKeys();
        });
        </script>

'''

def modify_ui_file_for_api_integration():
    """Modify the UI file to add API integration functionality"""
    with open(UI_FILE, 'r') as f:
        content = f.read()
    
    # Find the EnhancedUIState class definition point
    enhanced_ui_state_pos = content.find("class EnhancedUIState:")
    if enhanced_ui_state_pos == -1:
        print("❌ Could not find EnhancedUIState class. Please run Phase 2A first.")
        return False
    
    # Add the API integration code before the existing routes
    api_integration_code = create_api_integration_code()
    routes_pos = content.find("# Flask Routes") or content.find("@app.route('/')")
    
    if routes_pos == -1:
        print("❌ Could not find Flask routes section")
        return False
    
    # Insert API integration code
    new_content = content[:routes_pos] + api_integration_code + "\n" + content[routes_pos:]
    
    # Replace ui_state initialization
    old_init = "ui_state = EnhancedUIState()"
    new_init = "ui_state = APIIntegratedUIState()"
    new_content = new_content.replace(old_init, new_init)
    
    # Enhance the HTML template with API management
    html_template_start = new_content.find('HTML_TEMPLATE = \'\'\'')
    if html_template_start != -1:
        # Find the APIs tab content and replace it
        apis_tab_start = new_content.find('<div id="apis" class="tab-content">')
        if apis_tab_start != -1:
            apis_tab_end = new_content.find('</div>', apis_tab_start)
            # Find the next closing div that ends the APIs section
            div_count = 1
            search_pos = apis_tab_start + len('<div id="apis" class="tab-content">')
            while div_count > 0 and search_pos < len(new_content):
                next_div_open = new_content.find('<div', search_pos)
                next_div_close = new_content.find('</div>', search_pos)
                
                if next_div_close != -1 and (next_div_open == -1 or next_div_close < next_div_open):
                    div_count -= 1
                    search_pos = next_div_close + 6
                    if div_count == 0:
                        apis_tab_end = search_pos
                elif next_div_open != -1:
                    div_count += 1
                    search_pos = next_div_open + 4
                else:
                    break
            
            if apis_tab_end != -1:
                enhanced_apis_html = create_enhanced_html_additions()
                new_content = (new_content[:apis_tab_start] + 
                             enhanced_apis_html + 
                             new_content[apis_tab_end:])
    
    # Write the modified content
    with open(UI_FILE, 'w') as f:
        f.write(new_content)
    
    return True

def create_ai_tab_addition():
    """Create AI analysis tab"""
    return '''
        <div id="ai" class="tab-content">
            <h2 class="panel-title">🧠 AI Analysis</h2>
            
            <div class="api-section">
                <h3>Trading Analysis</h3>
                <div style="margin-bottom: 20px;">
                    <textarea id="aiPrompt" class="api-input" 
                              style="width: 100%; height: 100px; resize: vertical;" 
                              placeholder="Enter your trading question or analysis request..."></textarea>
                </div>
                
                <div style="display: flex; gap: 12px; margin-bottom: 20px;">
                    <button class="btn btn-blue" onclick="requestAIAnalysis('market')">📊 Market Analysis</button>
                    <button class="btn btn-purple" onclick="requestAIAnalysis('risk')">⚠️ Risk Assessment</button>
                    <button class="btn btn-green" onclick="requestAIAnalysis('strategy')">📈 Strategy Review</button>
                    <button class="btn btn-yellow" onclick="requestAIAnalysis('custom')">🔍 Custom Analysis</button>
                </div>
                
                <div id="aiResponse" class="api-section" style="display: none; background: var(--bg-primary); max-height: 400px; overflow-y: auto;">
                    <h4>AI Response:</h4>
                    <div id="aiResponseContent" style="white-space: pre-wrap; line-height: 1.6;"></div>
                </div>
            </div>
            
            <div class="api-section">
                <h3>AI Service Status</h3>
                <div class="bot-grid">
                    <div class="bot-card">
                        <div class="bot-header">
                            <div class="bot-name">🤖 OpenAI GPT-4</div>
                            <div class="bot-status" id="openai-ai-status">Not Configured</div>
                        </div>
                        <div class="bot-metrics">
                            <div class="bot-metric">
                                <div class="bot-metric-label">Model</div>
                                <div class="bot-metric-value">GPT-4</div>
                            </div>
                            <div class="bot-metric">
                                <div class="bot-metric-label">Use Case</div>
                                <div class="bot-metric-value">Market Analysis</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="bot-card">
                        <div class="bot-header">
                            <div class="bot-name">🧠 Claude Sonnet</div>
                            <div class="bot-status" id="anthropic-ai-status">Not Configured</div>
                        </div>
                        <div class="bot-metrics">
                            <div class="bot-metric">
                                <div class="bot-metric-label">Model</div>
                                <div class="bot-metric-value">Claude-3-Sonnet</div>
                            </div>
                            <div class="bot-metric">
                                <div class="bot-metric-label">Use Case</div>
                                <div class="bot-metric-value">Risk Analysis</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <script>
        async function requestAIAnalysis(type) {
            const promptElement = document.getElementById('aiPrompt');
            let prompt = promptElement.value.trim();
            
            // Pre-defined prompts for different analysis types
            const prompts = {
                market: "Analyze current market conditions and provide trading insights based on major crypto trends.",
                risk: "Assess the risk factors in current trading positions and suggest risk management strategies.",
                strategy: "Review trading strategy performance and suggest optimizations for better returns.",
                custom: prompt
            };
            
            if (type !== 'custom') {
                prompt = prompts[type];
                promptElement.value = prompt;
            }
            
            if (!prompt) {
                showNotification('Please enter a prompt for analysis', 'warning');
                return;
            }
            
            // Show loading
            const responseDiv = document.getElementById('aiResponse');
            const responseContent = document.getElementById('aiResponseContent');
            
            responseDiv.style.display = 'block';
            responseContent.textContent = 'Analyzing... 🤔';
            
            try {
                const response = await analyzeWithAI(prompt, type);
                
                if (response) {
                    responseContent.textContent = response;
                } else {
                    responseContent.textContent = 'Analysis failed. Please check your AI service configuration.';
                }
            } catch (err) {
                responseContent.textContent = 'Error during analysis: ' + err.message;
            }
        }
        
        // Update AI service status
        function updateAIServiceStatus() {
            // This will be populated when API keys are loaded
            const openaiStatus = document.getElementById('openai-ai-status');
            const anthropicStatus = document.getElementById('anthropic-ai-status');
            
            // Check if services are configured
            fetch('/api/ui/api_keys')
                .then(response => response.json())
                .then(keys => {
                    if (keys.openai && keys.openai.api_key) {
                        openaiStatus.textContent = 'Configured';
                        openaiStatus.className = 'bot-status status-active';
                    }
                    if (keys.anthropic && keys.anthropic.api_key) {
                        anthropicStatus.textContent = 'Configured';
                        anthropicStatus.className = 'bot-status status-active';
                    }
                })
                .catch(err => console.error('Error checking AI service status:', err));
        }
        
        // Update status on load
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(updateAIServiceStatus, 1000);
        });
        </script>
    '''

def add_ai_tab_to_html():
    """Add AI tab to the HTML template"""
    with open(UI_FILE, 'r') as f:
        content = f.read()
    
    # Find the tabs section and add AI tab
    tabs_section = content.find('<div class="tabs">')
    if tabs_section != -1:
        settings_tab = content.find('<button class="tab" onclick="showTab(\'settings\')">⚙️ Settings</button>')
        if settings_tab != -1:
            ai_tab = '<button class="tab" onclick="showTab(\'ai\')">🧠 AI</button>\n            '
            content = content[:settings_tab] + ai_tab + content[settings_tab:]
    
    # Find where to insert the AI tab content (before the closing container div)
    settings_div_end = content.find('</div>', content.find('<div id="settings" class="tab-content">'))
    if settings_div_end != -1:
        # Find the actual end of the settings div
        div_count = 1
        search_pos = content.find('<div id="settings" class="tab-content">') + len('<div id="settings" class="tab-content">')
        
        while div_count > 0 and search_pos < len(content):
            next_div_open = content.find('<div', search_pos)
            next_div_close = content.find('</div>', search_pos)
            
            if next_div_close != -1 and (next_div_open == -1 or next_div_close < next_div_open):
                div_count -= 1
                search_pos = next_div_close + 6
                if div_count == 0:
                    settings_div_end = search_pos
            elif next_div_open != -1:
                div_count += 1
                search_pos = next_div_open + 4
            else:
                break
        
        ai_tab_content = create_ai_tab_addition()
        content = content[:settings_div_end] + '\n        ' + ai_tab_content + content[settings_div_end:]
    
    # Write the modified content
    with open(UI_FILE, 'w') as f:
        f.write(content)
    
    return True

def main():
    print("""
╔══════════════════════════════════════════════════════════════════╗
║                  PHOENIX PRO ELITE - PHASE 2B                   ║
║               API Integrations & Encryption                      ║
║                    🔑 ENHANCING SECURITY 🔑                     ║
╚══════════════════════════════════════════════════════════════════╝
    """)
    
    print("🔍 Phase 2B: Adding API integrations and encryption...")
    
    # Install dependencies
    install_additional_dependencies()
    
    # Check if previous phases exist
    if not UI_FILE.exists():
        print("❌ UI file not found!")
        print(f"   Please run previous phases first and ensure {UI_FILE} exists")
        return False
    
    # Check for Phase 2A components
    with open(UI_FILE, 'r') as f:
        content = f.read()
    
    if "class EnhancedUIState" not in content:
        print("❌ Phase 2A components not found!")
        print("   Please run Phase 2A first to add database functionality")
        return False
    
    print("✅ Previous phases detected")
    
    # Backup current file
    if not backup_ui_file():
        return False
    
    # Modify the UI file
    print("🔧 Adding API integration functionality...")
    if not modify_ui_file_for_api_integration():
        print("❌ Failed to modify UI file")
        return False
    
    # Add AI tab
    print("🧠 Adding AI analysis tab...")
    if not add_ai_tab_to_html():
        print("⚠️ Could not add AI tab (non-critical)")
    
    print()
    print("✅ PHASE 2B INSTALLATION COMPLETE!")
    print("==================================")
    print()
    print("🔑 ADDED FEATURES:")
    print("   🔒 Advanced AES-256 Encryption:")
    print("     - PBKDF2 key derivation (100,000 iterations)")
    print("     - Secure API key storage")
    print("     - Master key protection")
    print()
    print("   📱 Telegram Integration:")
    print("     - Bot setup and testing")
    print("     - Live alert notifications")
    print("     - Test message functionality")
    print()
    print("   🧠 AI Service Integration:")
    print("     - OpenAI GPT-4 support")
    print("     - Claude Sonnet support")
    print("     - Trading analysis tools")
    print("     - Custom AI prompts")
    print()
    print("   📈 Exchange API Support:")
    print("     - Binance, Coinbase, Bybit")
    print("     - OKX, Bitget, Kraken")
    print("     - API key testing")
    print("     - Connection validation")
    print()
    print("   🔧 New API Endpoints:")
    print("     - /api/ui/api_keys (GET/POST)")
    print("     - /api/ui/api_keys/test/<service>")
    print("     - /api/ui/telegram/send_test")
    print("     - /api/ui/ai/analyze")
    print()
    print("   📊 Enhanced UI:")
    print("     - Improved API keys tab")
    print("     - Telegram integration panel")
    print("     - AI analysis tab")
    print("     - Connection status indicators")
    print()
    print("🔒 SECURITY FEATURES:")
    print("   ✅ All API keys encrypted at rest")
    print("   ✅ Secure file permissions (600)")
    print("   ✅ Master key protection")
    print("   ✅ Salt-based key derivation")
    print()
    print("🚀 RESTART YOUR UI:")
    print("   cd /root/phoenix-pro-elite/ui")
    print("   python3 app.py")
    print()
    print("📋 NEXT STEPS:")
    print("   1. Configure your API keys in the UI")
    print("   2. Set up Telegram bot for alerts")
    print("   3. Add OpenAI or Claude API keys")
    print("   4. Test all connections")
    print()
    print("🎯 READY FOR PHASE 2C: Live Features!")
    
    return True

if __name__ == "__main__":
    main()
